package fr.cgi.magneto.service;

import fr.cgi.magneto.core.enums.RealTimeStatus;
import fr.cgi.magneto.helper.MagnetoMessageWrapper;
import io.vertx.core.Future;
import io.vertx.core.Handler;

public interface MagnetoCollaborationService {
    Future<Void> start(final CollaborativeWallMetricsRecorder metricsRecorder);

    /**
     * @return Stop the processing of real-time events
     */
    Future<Void> stop();

    /**
     * Registers a handler that will receive "internal" messages (messages coming from other instances) to dispatch to
     * connected clients
     * @param subscriber Subscriber that takes as an input the list of messages generated by this service.
     */
    void subscribeToNewMessagesToSend(final Handler<MagnetoMessageWrapper> subscriber);

    /**
     * Registers a callback that will be invoked every time the status of the server changes.
     * @param subscriber The callback that will receive the new status of the server
     */
    void subscribeToStatusChanges(Handler<RealTimeStatus> subscriber);

    void unsubscribeToStatusChanges(Handler<RealTimeStatus> subscriber);

    /**
     * @return The current status of the real-time server
     */
    RealTimeStatus getStatus();
}
