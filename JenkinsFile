#!/usr/bin/env groovy

pipeline {
  agent any
  stages {

    stage("Initialization") {
      steps {
        script {
          def version = sh(returnStdout: true, script: 'cd backend && docker-compose run --rm maven mvn $MVN_OPTS help:evaluate -Dexpression=project.version -q -DforceStdout')
          buildName "${env.GIT_BRANCH.replace("origin/", "")}@${version}"
        }
    }
    }

    stage('Frontend React') {
      steps {
        dir('frontend') {
          sh 'chmod +x build.sh && ./build.sh installDeps build'
        }
      }
    }

    stage('Backend') {
      steps {
        dir('backend') {
          sh 'cp -R ../frontend/dist/* ./src/main/resources/'
          sh 'rm -rf ./src/main/resources/view'
          sh 'mkdir -p ./src/main/resources/view'
          sh 'mkdir -p ./src/main/resources/public/template'
          sh 'mkdir -p ./src/main/resources/public/img'
          sh 'mkdir -p ./src/main/resources/public/js'
          sh 'mv ./src/main/resources/*.html ./src/main/resources/view'
          sh 'cp -R ./src/main/resources/view-src/notify/ ./src/main/resources/view/notify'
          sh 'cp -R ../frontend/public/* ./src/main/resources/public'
          sh 'chmod +x build.sh && ./build.sh clean build publish'
          sh 'rm -rf ../frontend/dist'
        }
      }
    }
  }
  post {
      cleanup {
        sh 'cd backend && docker-compose down && cd ../frontend && docker-compose down'
      }
    }
}